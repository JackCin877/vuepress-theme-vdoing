(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{401:function(_,t,v){"use strict";v.r(t);var a=v(3),s=Object(a.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统之内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统之内存管理"}},[_._v("#")]),_._v(" 操作系统之内存管理")]),_._v(" "),t("h2",{attrs:{id:"一、什么是内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是内存"}},[_._v("#")]),_._v(" 一、什么是内存？")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-07199b2675646eb9f492bf0ea10c0793_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("最直观的，我们买手机，电脑，内存条，都会标明内存是多大，例如途中的8G，16G，128G都指的内存大小，另外支持国货，支持华为。")]),_._v(" "),t("li",[_._v("我们应该都听说过 "),t("strong",[_._v("RAM 存储器")]),_._v("，它是一种半导体存储器件。RAM 是英文单词 Random 的缩写，即“随机”的意思。所以 RAM 存储器也称为“"),t("strong",[_._v("随机存储器")]),_._v("”。")]),_._v(" "),t("li",[_._v("那么 RAM 存储器和内存有什么关系呢？"),t("font",{attrs:{color:"brown"}},[t("strong",[_._v("内存就是许多 RAM 存储器的集合，就是将许多 RAM 存储器集成在一起的电路板。RAM 存储器的优点是存取速度快、读写方便，所以内存的速度当然也就快了。")])])],1)]),_._v(" "),t("h2",{attrs:{id:"二、有何作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、有何作用"}},[_._v("#")]),_._v(" 二、有何作用")]),_._v(" "),t("h3",{attrs:{id:"_1、操作系统发展历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、操作系统发展历史"}},[_._v("#")]),_._v(" 1、操作系统发展历史")]),_._v(" "),t("ul",[t("li",[_._v("稍微了解操作系统历史的人，都知道"),t("strong",[_._v("没有操作系统的裸机")]),_._v("->"),t("strong",[_._v("一次只能运行一个程序的单道批处理系统")]),_._v("->"),t("strong",[_._v("多道批处理系统-")]),_._v(">"),t("strong",[_._v("分时系统")]),_._v("这个发展历程。")])]),_._v(" "),t("h4",{attrs:{id:"_1-1-裸机时代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-裸机时代"}},[_._v("#")]),_._v(" 1.1 裸机时代")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("主要是人工操作，程序员将对应用程序和数据的已穿孔的纸带（或卡片）装入输入机，然后启动输入机把程序和数据输入计算机内存，接着通过控制台开关启动程序针对数据运行；计算完毕，打印机输出计算结果；用户取走结果并卸下纸带（或卡片）后，才让下一个用户上机。")])]),_._v(" "),t("li",[t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-ac7aedd06b6108ea19a191056ca5c524_720w.webp",alt:"img"}})])]),_._v(" "),t("li",[t("p",[t("code",[_._v("人机矛盾：")]),_._v("手工操作的慢速度和计算机的高速度之间形成了尖锐矛盾，手工操作方式已严重损害了系统资源的利用率（使资源利用率降为百分之几，甚至更低），不能容忍。唯一的解决办法：只有摆脱人的手工操作，实现作业的自动过渡。这样就出现了成批处理。")])])]),_._v(" "),t("h4",{attrs:{id:"_1-2-单道批处理系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-单道批处理系统"}},[_._v("#")]),_._v(" 1.2 单道批处理系统")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("特点是一次只能运行一个进程")]),_._v("，只有运行完毕后才能将下一个进程加载到内存里面，所以进程的数据都是直接放在物理内存上的，因此"),t("strong",[_._v("CPU是直接操作内存的物理地址")]),_._v("，这个时候不存在虚拟逻辑地址，因为一次只能运行一个程序。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-d3dceaf08bb52deed39a58c987e5245e_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("code",[_._v("矛盾：")]),_._v("每次主机内存中仅存放一道作业，每当它运行期间发出输入/输出（I/O）请求后，高速的CPU便处于等待低速的I/O完成状态，致使CPU空闲。")])]),_._v(" "),t("h4",{attrs:{id:"_1-3-多道批处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-多道批处理"}},[_._v("#")]),_._v(" 1.3 多道批处理")]),_._v(" "),t("ul",[t("li",[_._v("到后来发展出了多道程序系统，它要求"),t("strong",[_._v("在计算机中存在着多个进程，处理器需要在多个进程间进行切换，当一道程序因I/O请求而暂停运行时，CPU便立即转去运行另一道程序")]),_._v("。")]),_._v(" "),t("li",[_._v("问题来了，这么多进程，内存不够用怎么办，各个进程同时运行时内存地址互相覆盖怎么办？")]),_._v(" "),t("li",[_._v("这时候就出现问题了，链接器在链接一个可执行文件的时候，总是默认程序的起始地址为0x0，但物理内存上只有一个0x0的地址呀？也许你会说:”没关系，"),t("strong",[_._v("我们可以在程序装入内存的时候再次动态改变它的地址")]),_._v(".”（看后面静态重定位装入就理解了）好吧我忍了。但如果我的物理内存大小只有1G,而现在某一个程序需要超过1G的空间怎么办呢？你还能用刚才那句话解释吗？")]),_._v(" "),t("li",[t("strong",[_._v("操作系统的发展，包括后面的分时系统，其实都是在解决协调各个环节速度不匹配的矛盾")]),_._v("。")])]),_._v(" "),t("h3",{attrs:{id:"_2、cpu比磁盘速度快太多"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、cpu比磁盘速度快太多"}},[_._v("#")]),_._v(" 2、CPU比磁盘速度快太多")]),_._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://pic4.zhimg.com/80/v2-c9f6ddff3bbb092e0823afe20cd1b473_720w.webp",alt:"img"}}),_._v(" "),t("ul",[t("li",[_._v("存储器层次之间的作用和关联为金字塔形状，CPU不可以直接操控磁盘，是通过操控内存来进行工作的，因为磁盘的速度远远小于CPU的速度，跟不上，需要中间的内存层进行缓冲。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-74e0afd164d57b052a1a60790922f283_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("内存速度比硬盘速度快的原理")]),_._v(": 内存的速度之所以比硬盘的速度快（不是快一点，而是快很多），是因为它们的存储原理和读取方式不一样。")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("硬盘是机械结构，通过磁头的转动读取数据")]),_._v("。一般情况下台式机的硬盘为每分钟 7200 转，而笔记本的硬盘为每分钟 5400 转。")])]),_._v(" "),t("li",[t("p",[_._v("而内存是没有机械结构的，"),t("strong",[_._v("内存是通过电存取数据的")]),_._v("。")])])])]),_._v(" "),t("li",[t("p",[_._v("内存通过电存取数据，本质上就是因为 RAM 存储器是通过电存储数据的。但也正因为它们是通过电存储数据的，所以一旦断电数据就都丢失了。因此内存只是供数据暂时逗留的空间，而硬盘是永久的，断电后数据也不会消失。")])]),_._v(" "),t("li",[t("p",[_._v("小结：程序执行前需要先放到内存中才能被CPU处理，"),t("strong",[t("code",[_._v("因此内存的主要作用就是缓和CPU与硬盘之间的速度矛盾")])]),_._v("。")])])]),_._v(" "),t("h2",{attrs:{id:"三、程序运行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、程序运行过程"}},[_._v("#")]),_._v(" 三、程序运行过程")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("在多道程序环境下，系统中会有多个程序并发执行，也就是说会有多个程序的数据需要同时放到内存中。那么，"),t("strong",[_._v("如何区分各个程序的数据是放在什么地方的呢")]),_._v("?")])]),_._v(" "),t("li",[t("p",[_._v("方案: "),t("strong",[_._v("给内存的存储单元编地址")]),_._v("。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-de0bfcf916595e18d363596159c483df_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("程序运行过程如下：")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-147fcdfb432081159e79737efebf370b_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("编译： "),t("strong",[_._v("把高级语言翻译为机器语言")]),_._v("；")]),_._v(" "),t("li",[_._v("链接："),t("strong",[_._v("由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块")]),_._v("；")]),_._v(" "),t("li",[_._v("装入(装载)："),t("strong",[_._v("由装入程序将装入模块装入内存运行")]),_._v("；")])]),_._v(" "),t("h3",{attrs:{id:"_1、三种链接方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、三种链接方式"}},[_._v("#")]),_._v(" 1、三种链接方式")]),_._v(" "),t("h4",{attrs:{id:"_1-1-静态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-静态链接"}},[_._v("#")]),_._v(" 1.1 静态链接")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("静态链接")]),_._v(" "),t("strong",[_._v("在程序运行之前，先将各目标模块及它们所需的库函数链接成一个完整的可执行文件(装入模块)，即得到完整的逻辑地址，之后不再拆开")]),_._v("。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-509eb91bcd90e2e3dc3b9ead4941d37c_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_1-2-装入时动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-装入时动态链接"}},[_._v("#")]),_._v(" 1.2 装入时动态链接")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("装入时动态链接")]),_._v(" "),t("strong",[_._v("运行前边装入边链接")]),_._v("的链接方式。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-081f0dec5f4a35173db6bf315171e2da_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_1-3-运行时动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-运行时动态链接"}},[_._v("#")]),_._v(" 1.3 运行时动态链接")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("运行时动态链接")]),_._v(" "),t("strong",[_._v("运行时该目标模块时，才对它进行链接，用不到的模块不需要装入内存。其优点是便于修改和更新，便于实现对目标模块的共享")]),_._v("。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-70b1d7ff26d2a623a5a17325808d81d9_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("可以看到"),t("strong",[_._v("运行时动态链接")]),_._v("，不需要一次性将模块全部装入内存，可以"),t("strong",[_._v("等到运行时需要的时候再动态的连接进去")]),_._v("，这样一来就提供了内存不够用的问题的解决思路，还可以这样，"),t("strong",[_._v("用到了再链接进去")]),_._v("。")])]),_._v(" "),t("h3",{attrs:{id:"_2、三种装入方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、三种装入方式"}},[_._v("#")]),_._v(" 2、三种装入方式")]),_._v(" "),t("h4",{attrs:{id:"_2-1-绝对装入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-绝对装入"}},[_._v("#")]),_._v(" 2.1 绝对装入")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("编译或汇编时得到绝对地址")]),_._v("，即"),t("code",[_._v("内存物理地址")]),_._v("，直接存到对应的物理地址。")])]),_._v(" "),t("li",[t("p",[_._v("单道处理系统就是直接操作物理地址，因此"),t("strong",[_._v("绝对装入只适用于单道程序环境")]),_._v("。")])])]),_._v(" "),t("h4",{attrs:{id:"_2-2-静态重定位装入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-静态重定位装入"}},[_._v("#")]),_._v(" 2.2 静态重定位装入")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("又称"),t("strong",[_._v("可重定位装入")]),_._v("，这里引入逻辑地址，"),t("strong",[_._v("装入时将逻辑地址重定位转化为物理地址，多道批处理系统的使用方式")]),_._v("。")])]),_._v(" "),t("li",[t("p",[t("font",{attrs:{color:"browm"}},[t("strong",[_._v("静态重定位的特点是在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。作业一旦进入内存后，在运行期间就不能再移动，也不能再申请内存空间。")])])],1)])]),_._v(" "),t("h4",{attrs:{id:"_2-3-动态重定位装入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-动态重定位装入"}},[_._v("#")]),_._v(" 2.3 动态重定位装入")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("又称"),t("strong",[_._v("动态运行时装入")]),_._v("，运行时将逻辑地址重定位转化为物理地址，这种方式需要一个重定位寄存器的支持，当然现代操作系统使用的都是这种。")])]),_._v(" "),t("li",[t("p",[_._v("逻辑地址都是从0开始的，假设装入的起始物理地址为100，动态重定位装入如下图：")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-efd74993b4b5552be9f0af9d3d4576e4_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-135c9ad29a7b8044852ccce1919b16fd_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("静态重定位装入是在装入时，动态重定位装入是在运行时。")])])]),_._v(" "),t("h2",{attrs:{id:"四、内存管理的职责"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、内存管理的职责"}},[_._v("#")]),_._v(" 四、内存管理的职责")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-ac6ce7df4070b43ed9b6bd6440724271_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_1、-连续分配管理方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-连续分配管理方式"}},[_._v("#")]),_._v(" 1、 连续分配管理方式")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-03ddfd1ef3d8da0f28c9f0d989d73017_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-259d7284c3903bfbc0c9f9151fef8364_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_1-1-单一连续分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单一连续分配"}},[_._v("#")]),_._v(" 1.1 单一连续分配")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-80f7a068a1e26499be59da83dac8fc56_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("在单一连续分配方式中，内存被分为系统区和用户区")]),_._v("。"),t("font",{attrs:{color:"browm"}},[t("strong",[_._v("系统区通常位于内存的低地址部分，用于存放操作系统相关数据;用户区用于存放用户进程相关数据。内存中只能有一道用户程序，用户程序独占整个用户区空间。")])])],1)]),_._v(" "),t("li",[t("p",[_._v("优点:实现简单;无外部碎片;")])]),_._v(" "),t("li",[t("p",[_._v("缺点:只能用于单用户、单任务的操作系统中;有内部碎片;存储器利用率极低。")])])]),_._v(" "),t("h4",{attrs:{id:"_1-2-固定分区分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-固定分区分配"}},[_._v("#")]),_._v(" 1.2 固定分区分配")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-5c089dca3f1d3e7565a70c601ed5ba3a_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("将整个用户空间划分为若干个固定大小的分区")]),_._v("，在"),t("strong",[_._v("每个分区中只装入一道作业")]),_._v("，这样就"),t("strong",[_._v("形成了最早的、最简单的一种可运行多道程序的内存管理方式")]),_._v("。")])]),_._v(" "),t("li",[t("p",[_._v("操作系统需要建立一个数据结构——"),t("strong",[_._v("分区说明表")]),_._v("，来实现各个分区的分配与回收。每个表项对应一个分区，通常按分区大小排列。每个表项包括对应分区的 大小、起始地址、状态(是否已分配)，如下图。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-61b541baace476d7919721e71aa1a02c_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("当某用户程序要装入内存时，由操作系统内核程序根据用户程序大小检索该表，从中找到一个能满足大小的、未分配的分区，将之分配给该程序，然后修改状态为“已分配”")]),_._v("。")])]),_._v(" "),t("li",[t("p",[_._v("优点: 实现简单，无外部碎片。")])]),_._v(" "),t("li",[t("p",[_._v("缺点: 会产生内部碎片，内存利用率低。")])])]),_._v(" "),t("h4",{attrs:{id:"_1-3-动态分区分配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-动态分区分配"}},[_._v("#")]),_._v(" 1.3 动态分区分配")]),_._v(" "),t("ul",[t("li",[_._v("动态分区分配又称为"),t("strong",[_._v("可变分区分配")]),_._v("。这种分配方式不会预先划分内存分区，而是在进程装入内存时， 根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的。(eg:假设某计算机内存大小为 64MB，系统区 8MB，用户区共 56 MB...)")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-50bd9e35ed429ca19b923868b2cfb2c6_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"三个问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三个问题"}},[_._v("#")]),_._v(" 三个问题：")]),_._v(" "),t("ul",[t("li",[_._v("系统要用什么样的数据结构记录内存的使用情况?")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-1009538d8d946d74e9b16d90b1c86dfe_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("当很多个空闲分区都能满足需求时， 应该选择哪个分区进行分配?")]),_._v(" "),t("li",[_._v("如何进行分区的分配与回收操作?")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("动态分区分配又称为可变分区分配。这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的。")])]),_._v(" "),t("li",[t("p",[_._v("缺点："),t("strong",[_._v("动态分区分配没有内部碎片，但是有外部碎片")]),_._v("。")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("内部碎片:")]),_._v("分配给某进程的内存区域中，有些部分没有用上。")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("外部碎片:")]),_._v("是指内存中的某些空闲分区由于太小而难以利用。")])])])]),_._v(" "),t("li",[t("p",[_._v("如果内存中空闲空间的总和本来可以满足某进程的要求， 但由于进程需要的是一整块连续的内存空间，因此这些 “碎片”不能满足进程的需求。 可以通过紧凑(拼凑，Compaction)技术来解决外部碎片。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-9588421727f31ddd437da0068337bbba_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"动态分区分配算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态分区分配算法"}},[_._v("#")]),_._v(" "),t("strong",[_._v("动态分区分配算法")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-321046dbe1d4bc7831460190cf40f14d_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("ol",[t("li",[t("strong",[_._v("首次适应算法")]),_._v(": 每次都从低地址开始查找，"),t("strong",[_._v("找到第一个能满足大小的空闲分区")]),_._v("。")]),_._v(" "),t("li",[t("strong",[_._v("最佳适应算法")]),_._v("：由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区，即，"),t("strong",[_._v("优先使用更小的空闲区")])]),_._v(" "),t("li",[t("strong",[_._v("最坏适应算法")]),_._v("：为了解决最佳适应算法的问题——即留下太多难以利用的小碎片，可以在每次分配时"),t("strong",[_._v("优先使用最大的连续空闲区")]),_._v("，这样分配后剩余的空闲区就不会太小，更方便使用。")]),_._v(" "),t("li",[t("strong",[_._v("邻近适应算法")]),_._v("：首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果"),t("strong",[_._v("每次都从上次查找结束的位置开始检索")]),_._v("，就能解决上述问题。")])])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-e40adcb74dbda06b489f7830996b0602_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_2、非连续分配管理方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、非连续分配管理方式"}},[_._v("#")]),_._v(" 2、非连续分配管理方式")]),_._v(" "),t("ul",[t("li",[t("strong",[t("code",[_._v("连续分配")])]),_._v("：为用户进程分配的必须是一个连续的内存空间。")]),_._v(" "),t("li",[t("strong",[t("code",[_._v("非连续分配")])]),_._v("：为用户进程分配的可以是一些分散的内存空间。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-67a7a2469489fc1f19636cdf6b3d9158_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_2-1-分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-分页"}},[_._v("#")]),_._v(" 2.1 分页")]),_._v(" "),t("h5",{attrs:{id:"_2-1-1-基本分页存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-基本分页存储"}},[_._v("#")]),_._v(" 2.1.1 基本分页存储")]),_._v(" "),t("ul",[t("li",[_._v("将内存空间分为一个个大小相等的分区(比如:每个分区 4KB)，每个分区就是一个“"),t("strong",[_._v("页框")]),_._v("”"),t("strong",[t("code",[_._v("(页框=页帧=内存块=物理块=物理页面)")])]),_._v("。每个页框有一个编号，即“页框号”"),t("code",[_._v("(页框号=页帧号=内存块号=物理块号=物理页号)")]),_._v("，页框号从0开始。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-6b7451282929b2164ec27a8f90fa1069_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[_._v("将进程的逻辑地址空间也分为与页框大小相等的一个个部分，每个部分称为一个“页”或“页面” 。每个页面也有一个编号，即“页号”，页号也是从0开始。")])]),_._v(" "),t("li",[t("p",[_._v("操作系统以页框为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中。也就是说，进程的页面与内存的页框有一一对应的关系。各个页面不必连续存放，可以放到不相邻的各个页框中。")])]),_._v(" "),t("li",[t("p",[_._v("注: 进程的最后一个页面可能没有一个页框那么大。也就是 16K-1 内存，分页存储有可能产生内部碎片，因此页框不能太大，否则可能产生过大的内部碎片造成浪费。")])])]),_._v(" "),t("h5",{attrs:{id:"_2-1-2-页表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-页表"}},[_._v("#")]),_._v(" 2.1.2 页表")]),_._v(" "),t("ul",[t("li",[_._v("为了能知道进程的每个页面在内存中存放的位置，操作系统要为每个进程建立一张页表，页表通常存在PCB(进程控制块)中。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-ac8fced71a65e0fdda0bbd4f98ec622c_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-1-3-🎈分页后的地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-🎈分页后的地址转换"}},[_._v("#")]),_._v(" 2.1.3 🎈分页后的地址转换")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-8701b8d97688576c5565f1887e042776_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("页号 = 逻辑地址 / 页面长度 (取除法的整数部分)")])])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("页内偏移量 = 逻辑地址 % 页面长度(取除法的余数部分)")])])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-7f729b1784ff5f08d8ad32967cbce143_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("基本地址变换：")])])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址。")]),_._v(" 通常会在系统中设置一个页表寄存器(PTR)，存放页表在内存中的"),t("strong",[_._v("起始地址F")]),_._v(" 和"),t("strong",[_._v("页表长度M")]),_._v("。 进程未执行时，页表的始址 和 页表长度 放在进程控制块(PCB)中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-c61249271e5ee1332209289a8d584f83_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("引入快表地址变换：")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-4a9119cf40cdb1341a188d354118fe60_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[_._v("快表，又称"),t("strong",[_._v("联想寄存器")]),_._v("(TLB， translation lookaside buffer )，是一种访问速度比内存快很多的高速缓存(TLB不是内存!)，用来存放最近访问的页表项的副本，可以加速地址变换的速度。与此对应，"),t("strong",[_._v("内存中的页表常称为慢表")]),_._v("。")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("注：")]),t("strong",[_._v("TLB 和 普通 Cache 的区别")]),_._v("——TLB 中只有页表项的副本，而普通 Cache 中可能会有其他各种数据的副本")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-96c4c31cbe55d3c7bc1f3cb129528dab_720w.webp",alt:"img"}})])]),_._v(" "),t("li",[t("p",[_._v("快表快多少？")]),_._v(" "),t("p",[_._v("例:某系统使用基本分页存储管理，并采用了具有快表的地址变换机构。访问一次快表耗时 1us，访问一次内存耗时 100us。若快表的命中率为 90%，那么访问一个逻辑地址的平均耗时是多少?")]),_._v(" "),t("p",[_._v("(1+100) * 0.9 + (1+100+100) * 0.1 = 111 us 有的系统支持快表和慢表同时查找，如果是这样，平均耗时应该是 (1+100) * 0.9 + (100+100) * 0.1 = 110.9 us")]),_._v(" "),t("p",[_._v("若未采用快表机制，则访问一个逻辑地址需要 100+100 = 200us 显然，引入快表机制后，访问一个逻辑地址的速度快多了。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("快表访问如果命中，那么就不去访问内存，所以查询速度就变快了")]),_._v("（看图和文字）")])])]),_._v(" "),t("h5",{attrs:{id:"_2-1-4-两级页表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-两级页表"}},[_._v("#")]),_._v(" 2.1.4 两级页表")]),_._v(" "),t("p",[t("strong",[_._v("单级页表的问题")]),_._v("：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("问题一: 根据页号查询页表的方法:K 号页对应的页表项存放位置 = 页表始址 + K * 4 ，页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框；")])]),_._v(" "),t("li",[t("p",[_._v("问题二:没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。")])]),_._v(" "),t("li",[t("p",[_._v("解决办法：把页表再分页并离散存储，然后再建立一张页表记录页表各个部分的存放位置，称为页目录表，或称外层页表，或称顶层页表。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-440b1ea401dc3616fdb6611a3f45ee9d_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-90a9ed33bda28f00331f3ad09f523871_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-1-5-多级页表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-多级页表"}},[_._v("#")]),_._v(" 2.1.5 多级页表")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-b9d74e558e94a4ea3783efbe5996da4d_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("感兴趣的看看多级页表分页方式。")])]),_._v(" "),t("h4",{attrs:{id:"_2-2-分段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-分段"}},[_._v("#")]),_._v(" 2.2 分段")]),_._v(" "),t("h5",{attrs:{id:"_2-2-1-什么是分段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-什么是分段"}},[_._v("#")]),_._v(" 2.2.1 什么是分段")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("进程的地址空间")]),_._v("：按照程序自身的逻辑关系划分为若干个段，每个段都有一个段名(在低级语言中，程序员使用段名来编程)，每段从0开始编址。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("内存分配规则")]),_._v(": 以段为单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻。")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-a8aec46d3701f7d85b679ecb0247d883_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-2-2-段表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-段表"}},[_._v("#")]),_._v(" 2.2.2 段表")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-fcba43a02683ed28766aec0b5cd0bfbc_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-2-3-地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-地址转换"}},[_._v("#")]),_._v(" 2.2.3 地址转换")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-1cb46ccbba5d2b3d0519cd4595d3437c_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_2-3-分段-vs-分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-分段-vs-分页"}},[_._v("#")]),_._v(" 2.3 分段 VS 分页")]),_._v(" "),t("ul",[t("li",[_._v("1、"),t("strong",[_._v("页是信息的物理单位")]),_._v("。分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，对用户是不可见的。")]),_._v(" "),t("li",[_._v("2、"),t("strong",[_._v("段是信息的逻辑单位")]),_._v("。分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻辑模块的信息。")]),_._v(" "),t("li",[_._v("3、分段对用户是可见的，用户编程时需要显式地给出段名。")]),_._v(" "),t("li",[_._v("4、页的大小固定且由系统决定。段的长度却不固定，决定于用户编写的程序。")]),_._v(" "),t("li",[_._v("5、分页的用户进程地址空间是一维的，程序员只需给出一个记忆符即可表示一个地址。")]),_._v(" "),t("li",[_._v("6、分段的用户进程地址空间是二维的，程序员在标识一个地址时，既要给出段名，也要给出段内地址。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-4c7a2da4ddceb63ab26eb7437d72b8eb_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[_._v("7、"),t("strong",[_._v("分段比分页更容易实现信息的共享和保护")]),_._v("。 不能被修改的代码称为纯代码或可重入代码(不属于临界资源)，这样的代码是可以共享的。可修改的代码是不能共享的(比如，有一个代码段中有很多变量，各进程并发地同时访问可能造成数据不一致)")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-e190c2f3a3b3855b41683ae091957b59_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_2-4-分段小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-分段小结"}},[_._v("#")]),_._v(" 2.4 分段小结")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("与“分页”最大的区别就是——离散分配时所分配地址空间的基本单位不同")]),_._v("。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-21cfa10701f09cfdc0374f3cc846083a_720w.webp",alt:"img"}})]),_._v(" "),t("h4",{attrs:{id:"_2-5-段业式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-段业式"}},[_._v("#")]),_._v(" 2.5 段业式")]),_._v(" "),t("ul",[t("li",[_._v("分段和分页的优缺点：")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-87048b5c55b70117c5e5cf9c4349dd20_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-5-1-什么是段页式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-什么是段页式"}},[_._v("#")]),_._v(" 2.5.1 什么是段页式")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-b8a2a46d3ff819cc3c066876c393981b_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[_._v("每个段对应一个段表项，每个段表项由段号、页表长度、页表存放块号(页表起始 地址)组成。")])]),_._v(" "),t("li",[t("p",[_._v("每个段表项长度相等，段号是隐含的。")])]),_._v(" "),t("li",[t("p",[_._v("内存每个页面对应一个页表项，每个页表项由页号、页面存放的内存块号组成。每个页表项长度相等，页号是隐含的。")])])]),_._v(" "),t("h5",{attrs:{id:"_2-5-2-段页式页表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-段页式页表"}},[_._v("#")]),_._v(" 2.5.2 段页式页表")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-560438411edaa068879a000e0667cb1b_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-5-3-段页式地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-段页式地址转换"}},[_._v("#")]),_._v(" 2.5.3 段页式地址转换")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-e3c7a67c81ef88077aa6ab5d8b168a13_720w.webp",alt:"img"}})]),_._v(" "),t("h5",{attrs:{id:"_2-5-4-段页式小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-段页式小结"}},[_._v("#")]),_._v(" 2.5.4 段页式小结")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-33049abc8b9165c9f240c3174d73dea1_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_3、地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、地址转换"}},[_._v("#")]),_._v(" 3、地址转换")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("为了使编程更方便，程序员写程序时应该只需要关注指令、数据的逻辑地址。而逻辑地址到物理地址的转换(这个过程称为地址重定位)应该由操作系统负责，这样就保证了程序员写程序时不需要关注物理内存的实际情况。")])]),_._v(" "),t("li",[t("p",[_._v("具体的地址转化方式如上，下 五、4 也有。")])])]),_._v(" "),t("h3",{attrs:{id:"_4、存储保护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、存储保护"}},[_._v("#")]),_._v(" 4、存储保护")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("操作系统需要提供内存保护功能")]),_._v("。保证各进程在各自存储空间内运行，互不干扰。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-5a63c857d3f83b967a4deed9dad7c4eb_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-0bf72352e297161fad9d4023fd39040f_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-714ed706a1d1d6da7a867f6cb953d2e0_720w.webp",alt:"img"}})]),_._v(" "),t("h2",{attrs:{id:"五、内存空间的扩充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、内存空间的扩充"}},[_._v("#")]),_._v(" 五、内存空间的扩充")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("很多游戏的大小超过 60GB，按理来说这个游戏程序运行之前需要把 60GB 数据全部放入内存。然而，实际我的电脑内存才 8GB，我还要开着微信浏览器等别的进程，但为什么这个游戏可以顺利运行呢?")])]),_._v(" "),t("li",[t("p",[_._v("利用虚拟技术("),t("strong",[_._v("操作系统的虚拟性")]),_._v(")")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-8de0efe76703de368c4f6a9bc7315012_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("时间局部性")]),_._v(": 如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行;如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环);")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("空间局部性")]),_._v(": 一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。 (因为很多数据在内存中都是连续存放的，并且程序的指令也是顺序地在内存中存放的)")])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-5905927b40c216e71ed20d567d744317_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("strong",[_._v("虚拟内存大小是多少?")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("虚拟内存的最大容量是由计算机的地址结构(CPU寻址范围)确定的，"),t("strong",[_._v("虚拟内存的实际容量 = min(内存和外存容量之和，CPU寻址范围)")])])]),_._v(" "),t("li",[t("p",[_._v("如:某计算机地址结构为32位，按字节编址，内存大小为512MB，外存大小为2GB。")])]),_._v(" "),t("li",[t("p",[_._v("则虚拟内存的最大容量为 2^32 B = 4GB;")])]),_._v(" "),t("li",[t("p",[_._v("虚拟内存的实际容量 = min (232B, 512MB+2GB) = 2GB+512MB;（这里的232B感觉是写错了，可能是2^32B）")])])]),_._v(" "),t("h3",{attrs:{id:"_1、虚拟内存的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、虚拟内存的实现"}},[_._v("#")]),_._v(" 1、虚拟内存的实现")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-a42f064170c614d5dd9b43e228d1f2d9_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_2、请求分页管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、请求分页管理"}},[_._v("#")]),_._v(" 2、请求分页管理")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("请求分页存储管理与基本分页存储管理的主要区别")]),_._v(":")])]),_._v(" "),t("li",[t("ol",[t("li",[t("strong",[_._v("请求调页")]),_._v("：在程序执行过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。")])])]),_._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[_._v("页面置换")]),_._v("：若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。")])])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-03cdea1177ff1bafe9fc49ae6d7bae64_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_3、请求分页-缺页中断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、请求分页-缺页中断"}},[_._v("#")]),_._v(" 3、请求分页 — 缺页中断")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-883ef5bd96cc3512cd4abd8f9e972be1_720w.webp",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("缺页中断是因为当前执行的指令想要访问的目标页面未调入内存而产生的")]),_._v("，因此"),t("code",[_._v("属于内中断")]),_._v("一条指令在执行期间，可能产生多次缺页中断。(如:copy A to B，即将逻辑地址A中的数据复制到 逻辑地址B，而A、B属于不同的页面，则有可能产生两次中断)")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-6e01bd25737cc6f31dbdfd024bad42e7_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_4、请求分页-地址转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、请求分页-地址转换"}},[_._v("#")]),_._v(" 4、请求分页 — 地址转换")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-7cb63d5a820b71c4b6c5ec495981834a_720w.webp",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-24f523c4d2d7692b9ab76f93e27d53af_720w.webp",alt:"img"}})]),_._v(" "),t("ol",[t("li",[_._v("只有“写指令”才需要修改“修改位”。并且，一般来说只需修改快表中的数据，只有要将快表项删除时才需要写回内存中的慢表。这样可以减少访存次数。")]),_._v(" "),t("li",[_._v("和普通的中断处理一样，缺页中断处理依然需要保留CPU现场。")]),_._v(" "),t("li",[_._v("需要用某种“页面置换算法”来决定一个换出页面(下节内容)")]),_._v(" "),t("li",[_._v("换入/换出页面都需要启动慢速的I/O操作，可见，如果换入/ 换出太频繁，会有很大的开销。")]),_._v(" "),t("li",[_._v("页面调入内存后，需要修改慢表，同时也需要将表项复制到快表中。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-b56ab3bc8642b140b78d3a5383a649ec_720w.webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_5、请求分页-页面置换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、请求分页-页面置换"}},[_._v("#")]),_._v(" 5、请求分页 — 页面置换")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("页面的换入、换出需要磁盘 I/O，会有较大的开销，因此好的页面置换算法应该追求更少的缺页率\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("ul",[t("li",[t("ol",[t("li",[_._v("最佳置换算法(OPT)")]),_._v(" "),t("li",[_._v("先进先出置换算法(FIFO)")]),_._v(" "),t("li",[_._v("最近最久未使用置换算法(LRU)")]),_._v(" "),t("li",[_._v("时钟置换算法(CLOCK)")]),_._v(" "),t("li",[_._v("改进型的时钟置换算法")])])])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-4ec0a11b44e522885391af2a876f010d_720w.webp",alt:"img"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);